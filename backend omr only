from flask import Flask, request, jsonify
from flask_cors import CORS
import cv2
import numpy as np
import os

app = Flask(__name__)
CORS(app)  # Enable CORS for frontend requests

UPLOAD_FOLDER = 'uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Dummy answer key
ANSWER_KEY = {1: 0, 2: 1, 3: 2, 4: 3, 5: 2, 6: 1, 7: 0, 8: 1, 9: 2, 10: 3}

def preprocess_image(image_path):
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    blurred = cv2.GaussianBlur(image, (5, 5), 0)
    _, thresh = cv2.threshold(blurred, 150, 255, cv2.THRESH_BINARY_INV)
    return image, thresh

def detect_bubbles(thresh):
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    bubble_contours = [c for c in contours if 100 < cv2.contourArea(c) < 1000]
    bubble_contours = sorted(bubble_contours, key=lambda c: (cv2.boundingRect(c)[1], cv2.boundingRect(c)[0]))
    questions = [bubble_contours[i:i+4] for i in range(0, len(bubble_contours), 4)][:10]
    return questions

def identify_filled_bubbles(thresh, questions):
    filled_bubbles = {}
    for q_index, options in enumerate(questions, start=1):
        filled = -1
        max_intensity = 0
        for opt_index, contour in enumerate(options):
            x, y, w, h = cv2.boundingRect(contour)
            roi = thresh[y:y+h, x:x+w]
            filled_ratio = cv2.countNonZero(roi) / (w * h)
            if filled_ratio > 0.5 and filled_ratio > max_intensity:
                max_intensity = filled_ratio
                filled = opt_index
        filled_bubbles[q_index] = filled
    return filled_bubbles

def grade_omr(filled_bubbles, answer_key):
    score = sum(1 for q_num, ans in answer_key.items() if filled_bubbles.get(q_num, -1) == ans)
    return score


@app.route('/process_omr', methods=['POST'])
def process_omr_api():
    if 'omrImage' not in request.files:
        return jsonify({'error': 'No image uploaded'}), 400

    file = request.files['omrImage']
    registration_number = request.form.get('registrationNumber')

    if not registration_number:
        return jsonify({'error': 'Missing registration number'}), 400

    image_path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
    file.save(image_path)

    try:
        image, thresh = preprocess_image(image_path)
        questions = detect_bubbles(thresh)
        filled_bubbles = identify_filled_bubbles(thresh, questions)
        score = grade_omr(filled_bubbles, ANSWER_KEY)

        return jsonify({
            'registrationNumber': registration_number,
            'detectedAnswers': filled_bubbles,
            'score': score,
            'status': 'Verified'
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)
